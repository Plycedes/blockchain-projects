{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/NovoFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.8;\r\n\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror NovoFund_NotOwner();\r\n\r\ncontract NovoFund{\r\n    using PriceConverter for uint256;\r\n\r\n    uint256 public constant minUSD = 50 * 1e18;\r\n\r\n    address public immutable i_owner;\r\n    address[] public s_funder;\r\n    mapping(address => uint256) public s_addressToAmountFunded;\r\n    \r\n    AggregatorV3Interface public s_priceFeed;\r\n\r\n    modifier ownerSigil{\r\n        //require(msg.sender == i_owner, \"Sender is not owner\");\r\n        if(msg.sender != i_owner) { revert NovoFund_NotOwner(); }\r\n        _;\r\n    }\r\n\r\n    constructor(address priceFeedAddress){\r\n        i_owner = msg.sender;\r\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    receive() payable external{\r\n        fund();\r\n    }\r\n\r\n    fallback() payable external{\r\n        fund();\r\n    }\r\n\r\n    function fund() public payable{\r\n        require(msg.value.getConversionRate(s_priceFeed) >= minUSD, \"Didn't send enough\");\r\n        s_funder.push(msg.sender);\r\n        s_addressToAmountFunded[msg.sender] += msg.value;\r\n    }\r\n\r\n    function withdraw() public payable ownerSigil{        \r\n        for(uint256 index = 0; index < s_funder.length; index++){\r\n            address funder = s_funder[index];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n        s_funder = new address[](0);\r\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    function cheaperWithdraw() public payable ownerSigil{\r\n        address[] memory funders =  s_funder;\r\n\r\n        for(uint256 index = 0; index < funders.length; index++){\r\n            address funder = funders[index];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n        s_funder = new address[](0);\r\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter{\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        //address: 0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        //AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\r\n        (, int256 price,,,) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n    }    \r\n\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount)/1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}